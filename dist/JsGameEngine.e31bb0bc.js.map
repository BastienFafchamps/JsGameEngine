{"version":3,"sources":["src/core/shader.js","src/core/core.js","index.js"],"names":["initShaderProgram","gl","vsSource","fsSource","vertexShader","loadShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","alert","getProgramInfoLog","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","main","canvas","document","getElementById","getContext","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT"],"mappings":";;AEAA;;;;AACA;ADDA;ADAA;ACEA,ADDA,ICCME,QAAQ,kOAAd;AAWA,ADXA,ICWMC,QAAQ,mFAAd;ADVO,SAASH,iBAAT,CAA2BC,EAA3B,EAA+BC,QAA/B,EAAyCC,QAAzC,EAAmD;ACgB3C,ADfX,MAAMC,GCecuB,IAAT,GAAgB,EDfT,GAAGtB,UAAU,CAACJ,EAAD,EAAKA,EAAE,CAACK,aAAR,EAAuBJ,QAAvB,CAA/B;ACgBA,ADfA,MCeM0B,ADfArB,MCeM,GAAGsB,KDfK,GCeG,ADfAxB,CCeCyB,SDfS,CAAC7B,EAAD,ECelB,ADfuBA,CCeC,CDfC,CAACO,WCe1B,CAAf,GDfiC,EAAyBL,QAAzB,CAAjC,CAFsD,CAItD;ACcA,MAAMF,EAAE,GAAG2B,MAAM,CAACG,UAAP,CAAkB,OAAlB,CAAX;ADbA,MAAMtB,aAAa,GAAGR,EAAE,CAACS,aAAH,EAAtB;ACeA,ADdAT,EAAAA,EAAE,CAACU,CCcC,CAACV,EAAL,EAAS,MDdT,CAAgBQ,aAAhB,EAA+BL,YAA/B;ACeIW,ADdJd,EAAAA,ECcIc,ADdF,CAACJ,ICcM,CAAC,ODdV,CAAgBF,aAAhB,EAA+BF,cAA/B,8BCcS,CAAL;AACA,ADdJN,EAAAA,EAAE,CAACW,WAAH,CAAeH,aAAf,EARsD,CAUtD;ACaC;ADZD,MAAI,CAACR,EAAE,CAACY,mBAAH,CAAuBJ,aAAvB,EAAsCR,EAAE,CAACa,WAAzC,CAAL,EAA4D;ACc5Db,ADbIc,ECaJd,EAAE,ADbEc,CCaDiB,IDbM,CAAC,KCaV,CAAc,GAAd,EAAmB,GAAnB,EAAwB,GAAxB,EAA6B,GAA7B,sBDbwD/B,EAAE,CAACe,iBAAH,CAAqBP,aAArB,CAA/C,CAAL;ACcJR,ADbI,ECaJA,EAAE,CAACgC,KAAH,CAAShC,ADbE,ECaA,CAACiC,CDbR,eCaK,GAAsBjC,EAAE,CAACkC,gBAAlC;AACH,ADbI;;AAED,SAAO1B,aAAP;AACH,EAED;AACA;AACA;AACA;;;AACO,SAASJ,UAAT,CAAoBJ,EAApB,EAAwBgB,IAAxB,EAA8BC,MAA9B,EAAsC;AACzC,MAAMC,MAAM,GAAGlB,EAAE,CAACmB,YAAH,CAAgBH,IAAhB,CAAf,CADyC,CAGzC;;AACAhB,EAAAA,EAAE,CAACoB,YAAH,CAAgBF,MAAhB,EAAwBD,MAAxB,EAJyC,CAMzC;;AACAjB,EAAAA,EAAE,CAACqB,aAAH,CAAiBH,MAAjB,EAPyC,CASzC;;AACA,MAAI,CAAClB,EAAE,CAACsB,kBAAH,CAAsBJ,MAAtB,EAA8BlB,EAAE,CAACuB,cAAjC,CAAL,EAAuD;AACnDT,IAAAA,KAAK,CAAC,8CAA8Cd,EAAE,CAACwB,gBAAH,CAAoBN,MAApB,CAA/C,CAAL;AACAlB,IAAAA,EAAE,CAACyB,YAAH,CAAgBP,MAAhB;AACA,WAAO,IAAP;AACH;;AAED,SAAOA,MAAP;AACH","file":"JsGameEngine.e31bb0bc.js","sourceRoot":"..","sourcesContent":["//\r\n// Initialize a shader program, so WebGL knows how to draw our data\r\n//\r\nexport function initShaderProgram(gl, vsSource, fsSource) {\r\n    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource);\r\n    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource);\r\n\r\n    // Create the shader program\r\n    const shaderProgram = gl.createProgram();\r\n    gl.attachShader(shaderProgram, vertexShader);\r\n    gl.attachShader(shaderProgram, fragmentShader);\r\n    gl.linkProgram(shaderProgram);\r\n\r\n    // If creating the shader program failed, alert\r\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\r\n        alert('Unable to initialize the shader program: ' + gl.getProgramInfoLog(shaderProgram));\r\n        return null;\r\n    }\r\n\r\n    return shaderProgram;\r\n}\r\n\r\n//\r\n// Creates a shader of the given type, uploads the source and\r\n// compiles it.\r\n//\r\nexport function loadShader(gl, type, source) {\r\n    const shader = gl.createShader(type);\r\n\r\n    // Send the source to the shader object\r\n    gl.shaderSource(shader, source);\r\n\r\n    // Compile the shader program\r\n    gl.compileShader(shader);\r\n\r\n    // See if it compiled successfully\r\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\r\n        alert('An error occurred compiling the shaders: ' + gl.getShaderInfoLog(shader));\r\n        gl.deleteShader(shader);\r\n        return null;\r\n    }\r\n\r\n    return shader;\r\n}\r\n","import { initShaderProgram, loadShader } from './shader.js'\r\n\r\nconst vsSource = `\r\n    attribute vec4 aVertexPosition;\r\n\r\n    uniform mat4 uModelViewMatrix;\r\n    uniform mat4 uProjectionMatrix;\r\n\r\n    void main() {\r\n        gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\r\n    }\r\n`;\r\n\r\nconst fsSource = `\r\n    void main() {\r\n        gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\r\n    }\r\n`;\r\n\r\nexport default function main() {\r\n    const canvas = document.getElementById('main-canvas');\r\n    const gl = canvas.getContext('webgl');\r\n\r\n    if (!gl) {\r\n        alert(\"Your browser doesn't support WebGL, please use a more recent one.\");\r\n        return;\r\n    }\r\n\r\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\r\n}","import main from './src/core/core.js';\r\nmain();"]}